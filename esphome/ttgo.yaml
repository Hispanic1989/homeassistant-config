---
substitutions:
  devicename: ttgo
  static_ip: !secret ttgo_ip

packages:
  base: !include common/default_base.yaml

esphome:
  name: ${devicename}
  platform: ESP32
  board: esp-wrover-kit

binary_sensor:
  - platform: status
    name: "${devicename} Status"
  - platform: gpio
    pin: GPIO33
    name: '${devicename} PIR'
    device_class: motion

sensor:
  - platform: wifi_signal
    id: "wifisignal"
    update_interval: 60s
    name: "${devicename} Signal"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${devicename} IP"
    mac_address:
      name: "${devicename} MAC"

esp32_camera:
  name: '${devicename}'
  external_clock:
    pin: GPIO32
    frequency: 20MHz
  i2c_pins:
    sda: GPIO13
    scl: GPIO12
  data_pins: [GPIO5, GPIO14, GPIO4, GPIO15, GPIO18, GPIO23, GPIO36, GPIO39]
  vsync_pin: GPIO27
  href_pin: GPIO25
  pixel_clock_pin: GPIO19
  power_down_pin: GPIO26
  resolution: 800x600
  jpeg_quality: 10
  vertical_flip: true
  horizontal_mirror: true

esp32_camera_web_server:
  - port: 8080
    mode: stream
  # - port: 8081
    # mode: snapshot

# i2c:
#   sda: GPIO21
#   scl: GPIO22
#   frequency: 50kHz
#   scan: true

# font:
#   - file: "fonts/arial.ttf"
#     id: fnt
#     size: 20

# time:
#   - platform: homeassistant
#     id: homeassistant_time

# text_sensor:
#   - platform: homeassistant
#     id: ttgo_header
#     internal: true
#     entity_id: 'input_text.ttgo_header'
#   - platform: homeassistant
#     id: ttgo_message
#     internal: true
#     entity_id: 'input_text.ttgo_message'
#   - platform: homeassistant
#     id: ttgo_subtitle
#     internal: true
#     entity_id: 'input_text.ttgo_subtitle'
#   - platform: homeassistant
#     id: ttgo_page
#     internal: true
#     entity_id: 'input_select.ttgo_page'
#     on_value:
#       then:
#         - display.page.show: !lambda |-
#             if (id(ttgo_page).state == "p_welkom") {
#               return id(p_welkom);
#             } else {
#               if (id(ttgo_page).state == "p_beweging") {
#                 return id(p_beweging);
#               } else {
#                 if (id(ttgo_page).state == "p_deurbel") {
#                   return id(p_deurbel);
#                 } else {
#                   return id(p_boot);
#                 }
#               }
#             }

# display:
#   - platform: ssd1306_i2c
#     id: my_display
#     model: "SSD1306 128x64"
#     address: 0x3C
#     pages:
#       - id: p_boot
#         lambda: |-
#           it.print(64, 40, id(hdr), COLOR_ON, TextAlign::BASELINE_CENTER, "Booting");
#       - id: p_welkom
#         lambda: |-
#           it.printf(64, 18, id(hdr), COLOR_ON, TextAlign::BASELINE_CENTER, "%s", id(ttgo_header).state.c_str());
#           it.printf(64, 38, id(txt), COLOR_ON, TextAlign::BASELINE_CENTER, "%s", id(ttgo_message).state.c_str());
#           it.printf(64, 60, id(sub), COLOR_ON, TextAlign::BASELINE_CENTER, "%s", id(ttgo_subtitle).state.c_str());
#       - id: p_beweging
#         lambda: |-
#           it.print(64, 50, id(fullscreen), COLOR_ON, TextAlign::BASELINE_CENTER, "Hallo!");
#       - id: p_deurbel
#         lambda: |-
#           it.print(64, 18, id(hdr), COLOR_ON, TextAlign::BASELINE_CENTER, "Ding Dong!");
#           it.print(64, 38, id(txt), COLOR_ON, TextAlign::BASELINE_CENTER, "Even geduld a.u.b...");
#           it.print(64, 60, id(sub), COLOR_ON, TextAlign::BASELINE_CENTER, "Please wait...");
